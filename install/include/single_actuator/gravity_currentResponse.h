// Generated by gencpp from file single_actuator/gravity_currentResponse.msg
// DO NOT EDIT!


#ifndef SINGLE_ACTUATOR_MESSAGE_GRAVITY_CURRENTRESPONSE_H
#define SINGLE_ACTUATOR_MESSAGE_GRAVITY_CURRENTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace single_actuator
{
template <class ContainerAllocator>
struct gravity_currentResponse_
{
  typedef gravity_currentResponse_<ContainerAllocator> Type;

  gravity_currentResponse_()
    : current(0.0)  {
    }
  gravity_currentResponse_(const ContainerAllocator& _alloc)
    : current(0.0)  {
  (void)_alloc;
    }



   typedef double _current_type;
  _current_type current;





  typedef boost::shared_ptr< ::single_actuator::gravity_currentResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::single_actuator::gravity_currentResponse_<ContainerAllocator> const> ConstPtr;

}; // struct gravity_currentResponse_

typedef ::single_actuator::gravity_currentResponse_<std::allocator<void> > gravity_currentResponse;

typedef boost::shared_ptr< ::single_actuator::gravity_currentResponse > gravity_currentResponsePtr;
typedef boost::shared_ptr< ::single_actuator::gravity_currentResponse const> gravity_currentResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::single_actuator::gravity_currentResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::single_actuator::gravity_currentResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::single_actuator::gravity_currentResponse_<ContainerAllocator1> & lhs, const ::single_actuator::gravity_currentResponse_<ContainerAllocator2> & rhs)
{
  return lhs.current == rhs.current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::single_actuator::gravity_currentResponse_<ContainerAllocator1> & lhs, const ::single_actuator::gravity_currentResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace single_actuator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::single_actuator::gravity_currentResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::single_actuator::gravity_currentResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::single_actuator::gravity_currentResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::single_actuator::gravity_currentResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::single_actuator::gravity_currentResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::single_actuator::gravity_currentResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::single_actuator::gravity_currentResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca4d0ba43a70fe6e37b76accdbf3ef40";
  }

  static const char* value(const ::single_actuator::gravity_currentResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca4d0ba43a70fe6eULL;
  static const uint64_t static_value2 = 0x37b76accdbf3ef40ULL;
};

template<class ContainerAllocator>
struct DataType< ::single_actuator::gravity_currentResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "single_actuator/gravity_currentResponse";
  }

  static const char* value(const ::single_actuator::gravity_currentResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::single_actuator::gravity_currentResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 current\n"
;
  }

  static const char* value(const ::single_actuator::gravity_currentResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::single_actuator::gravity_currentResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gravity_currentResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::single_actuator::gravity_currentResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::single_actuator::gravity_currentResponse_<ContainerAllocator>& v)
  {
    s << indent << "current: ";
    Printer<double>::stream(s, indent + "  ", v.current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SINGLE_ACTUATOR_MESSAGE_GRAVITY_CURRENTRESPONSE_H
